using Microsoft.Extensions.Options;
using RabbitMQ.Client;
using System;
using System.Text;
using VDB.Architecture.Concern.ExtensionMethods;
using VDB.MicroServices.VulnerabilityDetector.Concern.Options;
using VDB.MicroServices.VulnerabilityDetector.ExternalData.Manager.Contract;
using VDB.MicroServices.VulnerabilityDetector.ExternalData.Model.Notification;

namespace VDB.MicroServices.VulnerabilityDetector.ExternalData.Manager.MessageBroker.Implementation
{
    public class NotificationServiceManager : INotificationServiceManager, IDisposable
    {
        private bool disposedValue;

        private readonly IConnection RabbitMQConnection;
        private readonly IModel RabbitMQChannel;

        private readonly MessageBrokerSettings MessageBrokerSettings;
        private readonly MessageBrokerSecrets MessageBrokerSecrets;

        public NotificationServiceManager(IOptions<MessageBrokerSettings> messageBrokerSettings, IOptions<MessageBrokerSecrets> messageBrokerSecrets)
        {
            this.MessageBrokerSettings = messageBrokerSettings.Value;
            this.MessageBrokerSecrets = messageBrokerSecrets.Value;

            ConnectionFactory rabbitMQConnectionFactory = new()
            {
                HostName = this.MessageBrokerSettings.HostName,
                Port = this.MessageBrokerSettings.Port,
                UserName = this.MessageBrokerSecrets.UserName,
                Password = this.MessageBrokerSecrets.Password,
                DispatchConsumersAsync = true
            };

            this.RabbitMQConnection = rabbitMQConnectionFactory.CreateConnection();
            this.RabbitMQChannel = this.RabbitMQConnection.CreateModel();
            this.RabbitMQChannel.BasicQos(this.MessageBrokerSettings.PrefetchSize, this.MessageBrokerSettings.PrefetchCount, false);
        }

        public void SendNotification(SendNotificationRequestModel notification)
        {
            this.RabbitMQChannel.BasicPublish(String.Empty, this.MessageBrokerSettings.NotificationQueueName, null, Encoding.UTF8.GetBytes(notification.SerializeAsJson()));
        }

        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                    this.RabbitMQChannel.Close();
                }
                disposedValue = true;
            }
        }

        public void Dispose()
        {
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }
    }
}
