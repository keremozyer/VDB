using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using VDB.MicroServices.VulnerabilityDetector.DB.UnitOfWork;
using VDB.MicroServices.VulnerabilityDetector.Manager.Operation.Interface;
using VDB.MicroServices.VulnerabilityDetector.Model.Entity;

namespace VDB.MicroServices.VulnerabilityDetector.Manager.Operation.Implementation
{
    public class ProductVersionOperations : IProductVersionOperations
    {
        private readonly IVulnerabilityDetectorUnitOfWork DB;

        public ProductVersionOperations(IVulnerabilityDetectorUnitOfWork db)
        {
            this.DB = db;
        }

        public async Task<ProductVersion> GetAsync(Guid id, params Expression<Func<ProductVersion, object>>[] includes)
        {
            return await this.DB.ProductVersionRepository.GetFirstAsync(pv => pv.Id == id, includes: includes);
        }

        public async Task<ProductVersion> GetByVersionAndProductAndVendorName(string version, string productName, string vendorName)
        {
            return await this.DB.ProductVersionRepository.GetFirstAsync(pv => pv.Version == version && pv.Product.Name == productName && pv.Product.Vendor.Name == vendorName);
        }

        public async Task<List<ProductVersion>> GetProductVersionsWithIgnoredCVEs(params Expression<Func<ProductVersion, object>>[] includes)
        {
            return await this.DB.ProductVersionRepository.GetAsync(pv => pv.IgnoredCVEs.Any(), includes: includes);
        }

        public void Update(ProductVersion productVersion)
        {
            this.DB.ProductVersionRepository.Update(productVersion);
        }
    }
}
