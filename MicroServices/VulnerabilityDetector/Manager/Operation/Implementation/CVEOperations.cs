using System;
using System.Linq.Expressions;
using System.Threading.Tasks;
using VDB.MicroServices.VulnerabilityDetector.DB.UnitOfWork;
using VDB.MicroServices.VulnerabilityDetector.Manager.Operation.Interface;
using VDB.MicroServices.VulnerabilityDetector.Model.Entity;

namespace VDB.MicroServices.VulnerabilityDetector.Manager.Operation.Implementation
{
    public class CVEOperations : ICVEOperations
    {
        private readonly IVulnerabilityDetectorUnitOfWork DB;
        
        public CVEOperations(IVulnerabilityDetectorUnitOfWork db)
        {
            this.DB = db;
        }

        public void Create(CVE cve)
        {
            this.DB.CVERepository.Create(cve);
        }

        public async Task<CVE> GetAsync(Guid id, params Expression<Func<CVE, object>>[] includes)
        {
            return await this.DB.CVERepository.GetFirstAsync(c => c.Id == id, includes: includes);
        }

        public async Task<CVE> GetByCVEIDAsync(string cveID, params Expression<Func<CVE, object>>[] includes)
        {
            return await this.DB.CVERepository.GetFirstAsync(c => c.CVEID == cveID, includes: includes);
        }
    }
}
