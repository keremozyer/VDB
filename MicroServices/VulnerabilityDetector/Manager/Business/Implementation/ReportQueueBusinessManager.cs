using System;
using System.Threading.Tasks;
using VDB.MicroServices.VulnerabilityDetector.Concern.Constants;
using VDB.MicroServices.VulnerabilityDetector.DB.UnitOfWork;
using VDB.MicroServices.VulnerabilityDetector.ExternalData.Manager.Contract;
using VDB.MicroServices.VulnerabilityDetector.Manager.Business.Interface;
using VDB.MicroServices.VulnerabilityDetector.Manager.Operation.Interface;
using VDB.MicroServices.VulnerabilityDetector.Model.Entity;

namespace VDB.MicroServices.VulnerabilityDetector.Manager.Business.Implementation
{
    public class ReportQueueBusinessManager : IReportQueueBusinessManager
    {
        private readonly IVulnerabilityDetectorUnitOfWork DB;
        private readonly IReportPublisher ReportPublisher;
        private readonly IVulnerabilityReportOperations VulnerabilityReportOperations;

        public ReportQueueBusinessManager(IVulnerabilityDetectorUnitOfWork db, IReportPublisher reportPublisher, IVulnerabilityReportOperations vulnerabilityReportOperations)
        {
            this.DB = db;
            this.ReportPublisher = reportPublisher;
            this.VulnerabilityReportOperations = vulnerabilityReportOperations;
        }

        public async Task<Guid> CreateReport()
        {
            VulnerabilityReport vulnerabilityReport = new() { ReportStatus = VulnerabilityReportConstants.ReportStatusWaiting };
            this.VulnerabilityReportOperations.Create(vulnerabilityReport);

            await this.DB.SaveAsync();

            this.ReportPublisher.CreateReport(vulnerabilityReport.Id);

            return vulnerabilityReport.Id;
        }
    }
}
