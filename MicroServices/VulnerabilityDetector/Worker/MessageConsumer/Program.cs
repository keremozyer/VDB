using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using System;
using VDB.Architecture.Concern.Options;
using VDB.Architecture.Worker.Core;
using VDB.MicroServices.VulnerabilityDetector.Concern.Options;
using VDB.MicroServices.VulnerabilityDetector.DB.Context;
using VDB.MicroServices.VulnerabilityDetector.DB.UnitOfWork;
using VDB.MicroServices.VulnerabilityDetector.ExternalData.Manager.Contract;
using VDB.MicroServices.VulnerabilityDetector.ExternalData.Manager.MessageBroker.Implementation;
using VDB.MicroServices.VulnerabilityDetector.ExternalData.Manager.Service.CVEData.CVEData;
using VDB.MicroServices.VulnerabilityDetector.ExternalData.Manager.Service.ProductCatalog.InventoryManager;
using VDB.MicroServices.VulnerabilityDetector.Manager.Business.Implementation;
using VDB.MicroServices.VulnerabilityDetector.Manager.Business.Interface;
using VDB.MicroServices.VulnerabilityDetector.Manager.Mapper._AutoMapperProfiles;
using VDB.MicroServices.VulnerabilityDetector.Manager.Operation.Implementation;
using VDB.MicroServices.VulnerabilityDetector.Manager.Operation.Interface;

namespace VDB.MicroServices.VulnerabilityDetector.Worker.MessageConsumer
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run();
        }

        public static IHostBuilder CreateHostBuilder(string[] args)
        {
            string environment = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT");
            string extension = environment == "Production" ? ".json" : $".{environment}.json";

            string messageBrokerSettingsFile = $"Configuration/MessageBroker/MessageBrokerSettings{extension}";
            string messageBrokerSecretsFile = $"Configuration/MessageBroker/MessageBrokerSecrets{extension}";
            string redisSettingsFile = $"Configuration/Cache/RedisSettings{extension}";
            string endpointSettingsFile = $"Configuration/ExternalServices/EndpointSettings{extension}";
            string reportSettingsFile = $"Configuration/App/ReportSettings{extension}";
            string reportTemplatesFile = $"Configuration/App/ReportTemplates{extension}";
            string dbSettingsFile = $"Configuration/DB/DBSettings{extension}";

            IConfiguration config = new ConfigurationBuilder()
                .AddJsonFile(messageBrokerSettingsFile, false, true)
                .AddJsonFile(messageBrokerSecretsFile, false, true)
                .AddJsonFile(redisSettingsFile, false, true)
                .AddJsonFile(endpointSettingsFile, false, true)
                .AddJsonFile(reportSettingsFile, false, true)
                .AddJsonFile(reportTemplatesFile, false, true)
                .AddJsonFile(dbSettingsFile, false, true)
                .Build();

            return Host.CreateDefaultBuilder(args)
                .ConfigureAppConfiguration((hostingContext, config) =>
                {
                    config.AddJsonFile(messageBrokerSettingsFile, false, true);
                    config.AddJsonFile(messageBrokerSecretsFile, false, true);
                    config.AddJsonFile(redisSettingsFile, false, true);
                    config.AddJsonFile(endpointSettingsFile, false, true);
                    config.AddJsonFile(reportSettingsFile, false, true);
                    config.AddJsonFile(reportTemplatesFile, false, true);
                    config.AddJsonFile(dbSettingsFile, false, true);
                })
                .ConfigureServices((hostContext, services) =>
                {
                    services.AddHostedService<Worker>();

                    ConfigureOptions(services, config);

                    CommonStartup.ConfigureRedis(services, config);

                    ConfigureHttpClients(services);

                    ConfigureBusinessManagers(services);

                    ConfigureServiceManagers(services);

                    ConfigureOperations(services);

                    CommonStartup.ConfigureAutoMapper(services, new VulnerabilityDetectorMappingProfile());

                    ConfigureDatabase(services, config);

                    services.AddLogging();
                });
        }

        private static void ConfigureOptions(IServiceCollection services, IConfiguration config)
        {
            services.AddOptions<MessageBrokerSettings>().Bind(config.GetSection(nameof(MessageBrokerSettings)));
            services.AddOptions<MessageBrokerSecrets>().Bind(config.GetSection(nameof(MessageBrokerSecrets)));
            services.AddOptions<RedisSettings>().Bind(config.GetSection(nameof(RedisSettings)));
            services.AddOptions<EndpointSettings>().Bind(config.GetSection(nameof(EndpointSettings)));
            services.AddOptions<ReportSettings>().Bind(config.GetSection(nameof(ReportSettings)));
            services.AddOptions<ReportTemplates>().Bind(config.GetSection(nameof(ReportTemplates)));
        }

        private static void ConfigureHttpClients(IServiceCollection services)
        {
            services.AddHttpClient<IProductCatalogServiceManager, InventoryManagerServiceManager>();
            services.AddHttpClient<ICVEDataServiceManager, CVEDataServiceManager>();
        }

        private static void ConfigureBusinessManagers(IServiceCollection services)
        {
            services.AddScoped(typeof(IReportBusinessManager), typeof(ReportBusinessManager));
            services.AddScoped(typeof(IReportDocumentBusinessManager), typeof(ReportDocumentBusinessManager));
            services.AddScoped(typeof(IProductCatalogBusinessManager), typeof(ProductCatalogBusinessManager));
            services.AddScoped(typeof(IReportContentBusinessManager), typeof(ReportContentBusinessManager));            
        }

        private static void ConfigureServiceManagers(IServiceCollection services)
        {
            services.AddScoped(typeof(IProductCatalogServiceManager), typeof(InventoryManagerServiceManager));
            services.AddScoped(typeof(ICVEDataServiceManager), typeof(CVEDataServiceManager));
            services.AddScoped(typeof(INotificationServiceManager), typeof(NotificationServiceManager));
            services.AddScoped(typeof(ITicketServiceManager), typeof(TicketServiceManager));
        }

        private static void ConfigureOperations(IServiceCollection services)
        {
            services.AddScoped(typeof(IVulnerabilityReportOperations), typeof(VulnerabilityReportOperations));
            services.AddScoped(typeof(ICVEOperations), typeof(CVEOperations));
            services.AddScoped(typeof(IProductVersionOperations), typeof(ProductVersionOperations));
            services.AddScoped(typeof(IProductOperations), typeof(ProductOperations));
            services.AddScoped(typeof(IVendorOperations), typeof(VendorOperations));
            services.AddScoped(typeof(IServerOperations), typeof(ServerOperations));
        }

        private static void ConfigureDatabase(IServiceCollection services, IConfiguration config)
        {
            services.AddDbContext<VulnerabilityDetectorDataContext>(options => options.UseSqlServer(config.GetConnectionString("VulnerabilityDetectorDataContext"), sqlServerOptions => sqlServerOptions.MigrationsAssembly("VDB.MicroServices.VulnerabilityDetector.DB.Context")));
            services.AddScoped(typeof(IVulnerabilityDetectorUnitOfWork), typeof(VulnerabilityDetectorUnitOfWork));
        }
    }
}
