using Microsoft.Extensions.Options;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using VDB.Architecture.Concern.ExtensionMethods;
using VDB.MicroServices.VulnerabilityDetector.Concern.Options;
using VDB.MicroServices.VulnerabilityDetector.Manager.Business.Interface;
using VDB.MicroServices.VulnerabilityDetector.Model.DTO.ProductCatalog;
using VDB.MicroServices.VulnerabilityDetector.Model.Entity;

namespace VDB.MicroServices.VulnerabilityDetector.Manager.Business.Implementation
{
    public class ReportDocumentBusinessManager : IReportDocumentBusinessManager
    {
        private readonly ReportTemplates ReportTemplates;

        public ReportDocumentBusinessManager(IOptions<ReportTemplates> reportTemplates)
        {
            this.ReportTemplates = reportTemplates.Value;
        }

        public string GenerateDocument(Catalog productCatalog, VulnerabilityReport vulnerabilityReport)
        {
            List<string> vendorBlocks = new();
            foreach (VendorData vendor in productCatalog.Products.Select(p => p.Vendor).DistinctBy(v => v.ID))
            {
                List<string> productBlocks = new();
                foreach (ProductData product in productCatalog.Products.Where(p => p.Vendor.ID == vendor.ID))
                {
                    List<string> versionBlocks = new();
                    foreach (ProductVersionData version in product.ProductVersions)
                    {
                        List<string> serverBlocks = version.Servers.Select(s => String.Format(this.ReportTemplates.ServerTemplate, s.Name))?.ToList();
                        List<string> cveBlocs = version.MatchedCVEs.Select(c => String.Format(this.ReportTemplates.CVERowTemplate, c.CVEID, c.PublishedDate.ToUniversalTime().ToString(this.ReportTemplates.DateFormat), c.LastModifiedDate.ToUniversalTime().ToString(this.ReportTemplates.DateFormat), c.Description, c.MatchType != null && this.ReportTemplates.MatchTypeDescriptions.ContainsKey(((int)c.MatchType).ToString()) ? this.ReportTemplates.MatchTypeDescriptions[((int)c.MatchType).ToString()] : String.Empty)).ToList();
                        
                        versionBlocks.Add(String.Format(this.ReportTemplates.VersionTemplate, version.Version, String.Join(String.Empty, serverBlocks), String.Join(String.Empty, cveBlocs)));
                    }

                    productBlocks.Add(String.Format(this.ReportTemplates.ProductTemplate, product.Name, String.Join(String.Empty, versionBlocks)));
                }

                vendorBlocks.Add(String.Format(this.ReportTemplates.VendorTemplate, vendor.Name, String.Join(String.Empty, productBlocks)));
            }

            string pageHTML = String.Format(this.ReportTemplates.PageTemplate, vulnerabilityReport.ReportCreationDate.Value.ToUniversalTime().ToString(this.ReportTemplates.DateFormat), String.Join(String.Empty, vendorBlocks));

            return Convert.ToBase64String(Encoding.UTF8.GetBytes(pageHTML));
        }
    }
}
