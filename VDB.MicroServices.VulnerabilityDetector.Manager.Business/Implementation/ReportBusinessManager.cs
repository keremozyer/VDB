using Microsoft.Extensions.Options;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using VDB.Architecture.AppException.Model.Derived.DataNotFound;
using VDB.Architecture.Concern.ExtensionMethods;
using VDB.MicroServices.VulnerabilityDetector.Concern.Constants;
using VDB.MicroServices.VulnerabilityDetector.Concern.Options;
using VDB.MicroServices.VulnerabilityDetector.DB.UnitOfWork;
using VDB.MicroServices.VulnerabilityDetector.ExternalData.Manager.Contract;
using VDB.MicroServices.VulnerabilityDetector.ExternalData.Model.Notification;
using VDB.MicroServices.VulnerabilityDetector.ExternalData.Model.Ticket;
using VDB.MicroServices.VulnerabilityDetector.Manager.Business.Interface;
using VDB.MicroServices.VulnerabilityDetector.Manager.Operation.Interface;
using VDB.MicroServices.VulnerabilityDetector.Model.DTO.ProductCatalog;
using VDB.MicroServices.VulnerabilityDetector.Model.Entity;

namespace VDB.MicroServices.VulnerabilityDetector.Manager.Business.Implementation
{
    public class ReportBusinessManager : IReportBusinessManager
    {
        private readonly IVulnerabilityDetectorUnitOfWork DB;
        private readonly ReportSettings ReportSettings;
        private readonly IReportDocumentBusinessManager ReportDocumentBusinessManager;
        private readonly IVulnerabilityReportOperations VulnerabilityReportOperations;
        private readonly INotificationServiceManager NotificationServiceManager;
        private readonly ITicketServiceManager TicketServiceManager;
        private readonly IProductCatalogBusinessManager ProductCatalogBusinessManager;
        private readonly IReportContentBusinessManager ReportContentBusinessManager;

        public ReportBusinessManager(IVulnerabilityDetectorUnitOfWork db, IOptions<ReportSettings> reportSettings, IReportDocumentBusinessManager reportDocumentBusinessManager, IVulnerabilityReportOperations vulnerabilityReportOperations, INotificationServiceManager notificationServiceManager, IProductCatalogBusinessManager productCatalogBusinessManager, IReportContentBusinessManager reportContentBusinessManager, ITicketServiceManager ticketServiceManager)
        {
            this.TicketServiceManager = ticketServiceManager;
            this.DB = db;
            this.ReportSettings = reportSettings.Value;
            this.ReportDocumentBusinessManager = reportDocumentBusinessManager;
            this.VulnerabilityReportOperations = vulnerabilityReportOperations;
            this.NotificationServiceManager = notificationServiceManager;
            this.ProductCatalogBusinessManager = productCatalogBusinessManager;
            this.ReportContentBusinessManager = reportContentBusinessManager;
        }

        public async Task CreateReport(Guid id)
        {
            VulnerabilityReport vulnerabilityReport = await this.VulnerabilityReportOperations.GetAsync(id);
            if (vulnerabilityReport == null) throw new DataNotFoundException(entityName: typeof(VulnerabilityReport).GetDisplayName(), value: id);

            try
            {
                await ProcessReport(vulnerabilityReport);
            }
            catch (Exception exception)
            {
                await LogException(vulnerabilityReport, exception);
                throw;
            }
        }

        private async Task LogException(VulnerabilityReport vulnerabilityReport, Exception exception)
        {
            vulnerabilityReport.ReportStatus = VulnerabilityReportConstants.ReportStatusError;
            vulnerabilityReport.ErrorMessage = exception.Message;
            vulnerabilityReport.ErrorDetail = exception.SerializeAsJson();
            await this.DB.SaveAsync();
        }

        private async Task ProcessReport(VulnerabilityReport vulnerabilityReport)
        {
            vulnerabilityReport.ReportCreationDate = DateTime.UtcNow;
            vulnerabilityReport.ReportStatus = VulnerabilityReportConstants.ReportStatusProcessing;
            this.VulnerabilityReportOperations.Update(vulnerabilityReport);
            await this.DB.SaveAsync();

            Catalog productCatalog = await this.ProductCatalogBusinessManager.GetCatalog();
            if (productCatalog == null) return;

            vulnerabilityReport.Contents = await this.ReportContentBusinessManager.StoreReporContents(productCatalog, vulnerabilityReport);  

            if (vulnerabilityReport.Contents.HasElements())
            {
                vulnerabilityReport.Base64ReportData = this.ReportDocumentBusinessManager.GenerateDocument(vulnerabilityReport);
                if (!String.IsNullOrWhiteSpace(vulnerabilityReport.Base64ReportData))
                {
                    SendReportNotification(vulnerabilityReport);
                }

                CreateTicketsForReport(vulnerabilityReport);
            }
            
            vulnerabilityReport.ReportStatus = VulnerabilityReportConstants.ReportStatusCompleted;
            vulnerabilityReport.ErrorDetail = null;
            vulnerabilityReport.ErrorMessage = null;
            this.VulnerabilityReportOperations.Update(vulnerabilityReport);

            await this.DB.SaveAsync();
        }

        private void CreateTicketsForReport(VulnerabilityReport vulnerabilityReport)
        {
            CreateTicketRequestModel request = new(new List<TicketData>());
            foreach (ReportContent content in vulnerabilityReport.Contents)
            {
                foreach (CVEMatch match in content.CVEMatches)
                {
                    request.Data.Add(new TicketData(vulnerabilityReport.Id.ToString(), match.Description, match.CVE.CVEID, content.ProductVersion.Product.Vendor.Name, content.ProductVersion.Product.Name, content.ProductVersion.Version));
                }
            }

            this.TicketServiceManager.CreateTicket(request);
        }

        private void SendReportNotification(VulnerabilityReport vulnerabilityReport)
        {
            SendNotificationRequestModel request = new()
            {
                NotificationContext = this.ReportSettings.ReportNotificationSettings.NotificationContext,
                Content = this.ReportSettings.ReportNotificationSettings.Content,
                Subject = this.ReportSettings.ReportNotificationSettings.Subject,
                Attachments = new NotificationAttachmentModel[] { new ()
                {
                    Base64Data = vulnerabilityReport.Base64ReportData,
                    ContentType = this.ReportSettings.ReportNotificationSettings.ReportDocumentSettings.ContentType,
                    FileName = $"{vulnerabilityReport.CreatedAt.ToString(this.ReportSettings.ReportNotificationSettings.ReportDocumentSettings.ReportFileNameDateFormat)}.{this.ReportSettings.ReportNotificationSettings.ReportDocumentSettings.Extension}"
                } }
            };

            this.NotificationServiceManager.SendNotification(request);
        }
    }
}
