using AutoMapper;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using VDB.Architecture.AppException.Model.Derived.DataNotFound;
using VDB.Architecture.Concern.ExtensionMethods;
using VDB.MicroServices.VulnerabilityDetector.Manager.Business.Interface;
using VDB.MicroServices.VulnerabilityDetector.Manager.Operation.Interface;
using VDB.MicroServices.VulnerabilityDetector.Model.Entity;
using VDB.MicroServices.VulnerabilityDetector.Model.Exchange._Common;
using VDB.MicroServices.VulnerabilityDetector.Model.Exchange.ProductVersionCVE.AcknowledgeCVEForProductVersion;
using VDB.MicroServices.VulnerabilityDetector.Model.Exchange.ProductVersionCVE.GetIgnoredCVEsOfProductVersion;
using VDB.MicroServices.VulnerabilityDetector.Model.Exchange.ProductVersionCVE.GetProductVersionsWithIgnoredCVEs;
using VDB.MicroServices.VulnerabilityDetector.Model.Exchange.ProductVersionCVE.IgnoreCVEForProductVersion;

namespace VDB.MicroServices.VulnerabilityDetector.Manager.Business.Implementation
{
    public class ProductVersionBusinessManager : IProductVersionBusinessManager
    {
        private readonly IMapper Mapper;
        private readonly IProductVersionOperations ProductVersionOperations;
        private readonly ICVEOperations CVEOperations;

        public ProductVersionBusinessManager(IMapper mapper, IProductVersionOperations productVersionOperations, ICVEOperations cveOperations)
        {
            this.Mapper = mapper;
            this.ProductVersionOperations = productVersionOperations;
            this.CVEOperations = cveOperations;
        }

        public async Task IgnoreCVEForProductVersion(IgnoreCVEForProductVersionRequestModel request)
        {
            ProductVersion productVersion = await this.ProductVersionOperations.GetAsync(request.ProductVersionID, i => i.IgnoredCVEs);
            if (productVersion == null) throw new DataNotFoundException(entityName: typeof(ProductVersion).GetDisplayName(), value: request.ProductVersionID);

            if ((productVersion.IgnoredCVEs?.Any(i => i.Id == request.CVEID)).GetValueOrDefault()) return;

            CVE cve = await this.CVEOperations.GetAsync(request.CVEID);
            if (cve == null) throw new DataNotFoundException(entityName: typeof(CVE).GetDisplayName(), value: request.CVEID);

            productVersion.IgnoredCVEs ??= new List<CVE>();
            productVersion.IgnoredCVEs.Add(cve);

            this.ProductVersionOperations.Update(productVersion);
        }

        public async Task AcknowledgeCVEForProductVersion(AcknowledgeCVEForProductVersionRequestModel request)
        {
            ProductVersion productVersion = await this.ProductVersionOperations.GetAsync(request.ProductVersionID, i => i.IgnoredCVEs);
            if (productVersion == null) throw new DataNotFoundException(entityName: typeof(ProductVersion).GetDisplayName(), value: request.ProductVersionID);

            if (productVersion.IgnoredCVEs.IsNullOrEmpty()) return;

            CVE cveToAcknowledge = productVersion.IgnoredCVEs?.FirstOrDefault(i => i.Id == request.CVEID);

            if (cveToAcknowledge == null) return;

            productVersion.IgnoredCVEs.Remove(cveToAcknowledge);

            this.ProductVersionOperations.Update(productVersion);
        }

        public async Task<GetProductVersionsWithIgnoredCVEsResponseModel> GetProductVersionsWithIgnoredCVEs()
        {
            List<ProductVersion> productVersions = await this.ProductVersionOperations.GetProductVersionsWithIgnoredCVEs(i => i.Product.Vendor);

            return new GetProductVersionsWithIgnoredCVEsResponseModel(productVersions?.Select(pv => this.Mapper.Map<ProductVersionData>(pv)));
        }

        public async Task<GetIgnoredCVEsOfProductVersionResponseModel> GetIgnoredCVEsOfProductVersion(Guid productVersionID)
        {
            ProductVersion productVersion = await this.ProductVersionOperations.GetAsync(productVersionID, i => i.IgnoredCVEs);
            if (productVersion == null) throw new DataNotFoundException(entityName: typeof(ProductVersion).GetDisplayName(), value: productVersionID);

            return new GetIgnoredCVEsOfProductVersionResponseModel(productVersion.IgnoredCVEs?.Select(i => this.Mapper.Map<CVEData>(i)));
        }
    }
}
