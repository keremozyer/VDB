using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using VDB.Architecture.Concern.ExtensionMethods;
using VDB.MicroServices.VulnerabilityDetector.Manager.Business.Interface;
using VDB.MicroServices.VulnerabilityDetector.Manager.Operation.Interface;
using VDB.MicroServices.VulnerabilityDetector.Model.DTO._CVEData;
using VDB.MicroServices.VulnerabilityDetector.Model.DTO.ProductCatalog;
using VDB.MicroServices.VulnerabilityDetector.Model.Entity;

namespace VDB.MicroServices.VulnerabilityDetector.Manager.Business.Implementation
{
    public class ReportContentBusinessManager : IReportContentBusinessManager
    {
        private readonly ICVEOperations CVEOperations;
        private readonly IProductOperations ProductOperations;
        private readonly IVendorOperations VendorOperations;
        private readonly IServerOperations ServerOperations;

        public ReportContentBusinessManager(ICVEOperations cveOperations, IProductOperations productOperations, IVendorOperations vendorOperations, IServerOperations serverOperations)
        {
            this.CVEOperations = cveOperations;
            this.ProductOperations = productOperations;
            this.VendorOperations = vendorOperations;
            this.ServerOperations = serverOperations;
        }

        public async Task<List<ReportContent>> StoreReporContents(Catalog productCatalog, VulnerabilityReport vulnerabilityReport)
        {
            List<ReportContent> reportContents = new();
            foreach (ProductData productData in productCatalog.Products ?? new List<ProductData>())
            {
                Product product = await GetProduct(productData);

                foreach (ProductVersionData productVersionData in productData.ProductVersions ?? new List<ProductVersionData>())
                {
                    ProductVersion productVersion = product.ProductVersions?.FirstOrDefault(pv => pv.Version == productVersionData.Version.Trim().ToLower());

                    IEnumerable<CVEData> notIgnoredCVEs = productVersionData.MatchedCVEs?.Where(matchedCVE => !(productVersion?.IgnoredCVEs?.Any(ic => ic.CVEID == matchedCVE.CVEID)).GetValueOrDefault());
                    if (notIgnoredCVEs.IsNullOrEmpty())
                    {
                        continue;
                    }

                    if (productVersion == null)
                    {
                        product.ProductVersions ??= new List<ProductVersion>();
                        productVersion = new()
                        {
                            Version = productVersionData.Version,
                            Product = product
                        };
                        product.ProductVersions.Add(productVersion);
                        this.ProductOperations.Update(product);
                    }

                    ReportContent reportContent = new()
                    {
                        Report = vulnerabilityReport,
                        ProductVersion = productVersion,
                        Servers = productVersionData.Servers.Select(serverData => GetServer(serverData).Result).ToList(),
                        CVEMatches = notIgnoredCVEs.Select(cveData => new CVEMatch()
                        {
                            CVE = GetCVE(cveData).Result,
                            Description = cveData.Description,
                            LastModifiedDate = cveData.LastModifiedDate,
                            MatchType = cveData.MatchType == null ? null : (int)cveData.MatchType,
                            PublishedDate = cveData.PublishedDate
                        }).ToList()                        
                    };

                    reportContents.Add(reportContent);
                }
            }

            return reportContents.HasElements() ? reportContents : null;
        }

        private async Task<Product> GetProduct(ProductData productData)
        {
            Product product = await this.ProductOperations.GetByProductAndVendorNameAsync(productData.Name, productData.Vendor.Name, i => i.ProductVersions.SelectMany(pv => pv.IgnoredCVEs), i => i.Vendor);
            if (product == null)
            {
                product = await CreateNewProduct(productData);
            }

            return product;
        }

        private async Task<Product> CreateNewProduct(ProductData productData)
        {
            Vendor vendor = await GetVendor(productData.Vendor);
            Product product = new()
            {
                Name = productData.Name.Trim().ToLower(),
                Vendor = vendor
            };
            this.ProductOperations.Create(product);

            return product;
        }

        private async Task<Vendor> GetVendor(VendorData vendorData)
        {
            Vendor vendor = await this.VendorOperations.GetByNameAsync(vendorData.Name);
            if (vendor == null)
            {
                vendor = new Vendor()
                {
                    Name = vendorData.Name.Trim().ToLower()
                };
            }

            return vendor;
        }

        private async Task<Server> GetServer(ServerData serverData)
        {
            Server server = await this.ServerOperations.GetByNameAsync(serverData.Name);
            if (server == null)
            {
                server = new()
                {
                    Name = serverData.Name.Trim().ToLower()
                };
                this.ServerOperations.Create(server);
            }

            return server;
        }

        private async Task<CVE> GetCVE(CVEData cveData)
        {
            CVE cve = await this.CVEOperations.GetByCVEIDAsync(cveData.CVEID);
            if (cve == null)
            {
                cve = new CVE()
                {
                    CVEID = cveData.CVEID
                };
                this.CVEOperations.Create(cve);
            }

            return cve;
        }
    }
}
