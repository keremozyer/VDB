using VDB.Architecture.Data.Repository.Base;
using VDB.Architecture.Data.UnitOfWork;
using VDB.MicroServices.VulnerabilityDetector.DB.Context;
using VDB.MicroServices.VulnerabilityDetector.DB.Repository.EntityFramework;
using VDB.MicroServices.VulnerabilityDetector.Model.Entity;

namespace VDB.MicroServices.VulnerabilityDetector.DB.UnitOfWork
{
    public class VulnerabilityDetectorUnitOfWork : BaseUnitOfWork, IVulnerabilityDetectorUnitOfWork
    {
        public VulnerabilityDetectorUnitOfWork(VulnerabilityDetectorDataContext context) : base(context) { }

        private CVERepository cveRepository { get; set; }
        public IRepository<CVE> CVERepository { get { if (cveRepository == null) { cveRepository = new CVERepository((VulnerabilityDetectorDataContext)context); } return cveRepository; } }

        private ProductRepository productRepository { get; set; }
        public IRepository<Product> ProductRepository { get { if (productRepository == null) { productRepository = new ProductRepository((VulnerabilityDetectorDataContext)context); } return productRepository; } }

        private ProductVersionRepository productVersionRepository { get; set; }
        public IRepository<ProductVersion> ProductVersionRepository { get { if (productVersionRepository == null) { productVersionRepository = new ProductVersionRepository((VulnerabilityDetectorDataContext)context); } return productVersionRepository; } }

        private ReportContentRepository reportContentRepository { get; set; }
        public IRepository<ReportContent> ReportContentRepository { get { if (reportContentRepository == null) { reportContentRepository = new ReportContentRepository((VulnerabilityDetectorDataContext)context); } return reportContentRepository; } }

        private ServerRepository serverRepository { get; set; }
        public IRepository<Server> ServerRepository { get { if (serverRepository == null) { serverRepository = new ServerRepository((VulnerabilityDetectorDataContext)context); } return serverRepository; } }

        private VendorRepository vendorRepository { get; set; }
        public IRepository<Vendor> VendorRepository { get { if (vendorRepository == null) { vendorRepository = new VendorRepository((VulnerabilityDetectorDataContext)context); } return vendorRepository; } }

        private VulnerabilityReportRepository vulnerabilityReportRepository { get; set; }
        public IRepository<VulnerabilityReport> VulnerabilityReportRepository { get { if (vulnerabilityReportRepository == null) { vulnerabilityReportRepository = new VulnerabilityReportRepository((VulnerabilityDetectorDataContext)context); } return vulnerabilityReportRepository; } }
    }
}
