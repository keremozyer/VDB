using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using VDB.Architecture.Web.Core;
using VDB.MicroServices.VulnerabilityDetector.Concern.Options;
using VDB.MicroServices.VulnerabilityDetector.DB.Context;
using VDB.MicroServices.VulnerabilityDetector.DB.UnitOfWork;
using VDB.MicroServices.VulnerabilityDetector.ExternalData.Manager.Contract;
using VDB.MicroServices.VulnerabilityDetector.ExternalData.Manager.MessageBroker.Implementation;
using VDB.MicroServices.VulnerabilityDetector.Manager.Business.Implementation;
using VDB.MicroServices.VulnerabilityDetector.Manager.Business.Interface;
using VDB.MicroServices.VulnerabilityDetector.Manager.Mapper._AutoMapperProfiles;
using VDB.MicroServices.VulnerabilityDetector.Manager.Operation.Implementation;
using VDB.MicroServices.VulnerabilityDetector.Manager.Operation.Interface;

namespace VDB.MicroServices.VulnerabilityDetector.Web.API
{
    public class Startup
    {
        private IConfiguration Configuration { get; }

        public Startup(IConfiguration configuration)
        {
            this.Configuration = configuration;
        }

        public void ConfigureServices(IServiceCollection services)
        {
            ConfigureOptions(services);

            CommonStartup.CommonServiceConfiguration(new ServiceConfigurationOptions(services, this.Configuration)
            {
                UseSwagger = true,
                AutoMapperProfile = new VulnerabilityDetectorMappingProfile()
            });

            ConfigureDatabase(services);

            ConfigureBusinessManagers(services);
            ConfigureOperations(services);
            ConfigureMessageBrokers(services);
        }

        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            CommonStartup.CommonAppConfiguration(new AppConfigurationOptions(app, env, "Error")
            {
                SwaggerSettings = new()
                {
                    APIName = "VulnerabilityDetector.Web.API",
                    SwaggerEndpoint = "/swagger/v1/swagger.json",
                    Server = "/VulnerabilityDetector"
                }
            });
        }

        private void ConfigureOptions(IServiceCollection services)
        {
            services.AddOptions<MessageBrokerSettings>().Bind(this.Configuration.GetSection(nameof(MessageBrokerSettings)));
            services.AddOptions<MessageBrokerSecrets>().Bind(this.Configuration.GetSection(nameof(MessageBrokerSecrets)));
            services.AddOptions<ReportDocumentSettings>().Bind(this.Configuration.GetSection(nameof(ReportDocumentSettings)));            
        }

        private void ConfigureDatabase(IServiceCollection services)
        {
            services.AddDbContext<VulnerabilityDetectorDataContext>(options => options.UseSqlServer(Configuration.GetConnectionString("VulnerabilityDetectorDataContext"), sqlServerOptions => sqlServerOptions.MigrationsAssembly("VDB.MicroServices.VulnerabilityDetector.DB.Context")));
            services.AddScoped(typeof(IVulnerabilityDetectorUnitOfWork), typeof(VulnerabilityDetectorUnitOfWork));
        }

        private void ConfigureBusinessManagers(IServiceCollection services)
        {
            services.AddScoped(typeof(IReportQueueBusinessManager), typeof(ReportQueueBusinessManager));
            services.AddScoped(typeof(IReportSearchBusinessManager), typeof(ReportSearchBusinessManager));
            services.AddScoped(typeof(IProductVersionBusinessManager), typeof(ProductVersionBusinessManager));            
        }

        private void ConfigureOperations(IServiceCollection services)
        {
            services.AddScoped(typeof(IVulnerabilityReportOperations), typeof(VulnerabilityReportOperations));
            services.AddScoped(typeof(IProductVersionOperations), typeof(ProductVersionOperations));
            services.AddScoped(typeof(ICVEOperations), typeof(CVEOperations));
        }

        private void ConfigureMessageBrokers(IServiceCollection services)
        {
            services.AddSingleton(typeof(IReportPublisher), typeof(ReportMessageBroker));
        }
    }
}
