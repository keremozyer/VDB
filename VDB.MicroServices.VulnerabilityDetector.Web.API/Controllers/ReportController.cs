using Microsoft.AspNetCore.Mvc;
using System;
using System.Threading.Tasks;
using VDB.MicroServices.VulnerabilityDetector.Manager.Business.Interface;
using VDB.MicroServices.VulnerabilityDetector.Model.DTO.File;
using VDB.MicroServices.VulnerabilityDetector.Model.Exchange.Report.SearchReports;

namespace VDB.MicroServices.VulnerabilityDetector.Web.API.Controllers
{
    [Route("[controller]")]
    [ApiController]
    public class ReportController : ControllerBase
    {
        private readonly IReportQueueBusinessManager ReportQueueBusinessManager;
        private readonly IReportSearchBusinessManager ReportSearchBusinessManager;

        public ReportController(IReportQueueBusinessManager reportQueueBusinessManager, IReportSearchBusinessManager reportSearchBusinessManager)
        {
            this.ReportQueueBusinessManager = reportQueueBusinessManager;
            this.ReportSearchBusinessManager = reportSearchBusinessManager;
        }

        [HttpPost]
        public async Task<IActionResult> CreateReport()
        {
            Guid reportId = await this.ReportQueueBusinessManager.CreateReport();

            return Ok(reportId);
        }

        [HttpGet]
        public async Task<IActionResult> SearchReports([FromQuery] SearchReportsRequestModel request)
        {
            return Ok(await this.ReportSearchBusinessManager.Search(request));
        }

        [HttpGet(template: "Document/{reportID}")]
        public async Task<IActionResult> GetReportDocument(Guid reportID)
        {
            AppFile file = await this.ReportSearchBusinessManager.GetReportBytes(reportID);

            HttpContext.Response.ContentType = file.ContentType;
            HttpContext.Response.Headers.Add("Access-Control-Expose-Headers", "Content-Disposition");

            return new FileContentResult(file.Data, file.ContentType)
            {
                FileDownloadName = file.FileName
            };
        }

        [HttpGet(template: "Content/{reportID}")]
        public async Task<IActionResult> GetReportContents(Guid reportID)
        {
            return Ok(await this.ReportSearchBusinessManager.GetReport(reportID));
        }
    }
}
