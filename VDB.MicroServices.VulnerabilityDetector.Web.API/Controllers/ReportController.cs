using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Threading.Tasks;
using VDB.Architecture.AppException.Model;
using VDB.MicroServices.VulnerabilityDetector.Manager.Business.Interface;
using VDB.MicroServices.VulnerabilityDetector.Model.DTO.File;
using VDB.MicroServices.VulnerabilityDetector.Model.Exchange.Report.GetReport;
using VDB.MicroServices.VulnerabilityDetector.Model.Exchange.Report.SearchReports;

namespace VDB.MicroServices.VulnerabilityDetector.Web.API.Controllers
{
    [Route("[controller]")]
    [ApiController]
    public class ReportController : ControllerBase
    {
        private readonly IReportQueueBusinessManager ReportQueueBusinessManager;
        private readonly IReportSearchBusinessManager ReportSearchBusinessManager;

        public ReportController(IReportQueueBusinessManager reportQueueBusinessManager, IReportSearchBusinessManager reportSearchBusinessManager)
        {
            this.ReportQueueBusinessManager = reportQueueBusinessManager;
            this.ReportSearchBusinessManager = reportSearchBusinessManager;
        }

        /// <summary>
        /// Enqueues a report creation request.
        /// </summary>
        /// <returns>ID of report to be created.</returns>
        [HttpPost]
        public async Task<IActionResult> CreateReport()
        {
            Guid reportId = await this.ReportQueueBusinessManager.CreateReport();

            return Ok(reportId);
        }

        /// <summary>
        /// Searches db for reports with given parameters. All parameters are optional.
        /// </summary>
        /// <param name="request">Search parameters.</param>
        /// <returns>An object containing list of reports.</returns>
        [ProducesResponseType(StatusCodes.Status200OK, Type = typeof(SearchReportsResponseModel))]
        [HttpGet]
        public async Task<IActionResult> SearchReports([FromQuery] SearchReportsRequestModel request)
        {
            return Ok(await this.ReportSearchBusinessManager.Search(request));
        }

        /// <summary>
        /// Returns given reports document in file format.
        /// Will return an Http 400 status code if given report id is not found in the db.
        /// Will return an Htpp 422 status code if given report don't have a document.
        /// </summary>
        /// <param name="reportID">Reports id.</param>
        /// <returns>A file.</returns>
        [ProducesResponseType(StatusCodes.Status200OK, Type = typeof(FileContentResult))]
        [ProducesResponseType(StatusCodes.Status400BadRequest, Type = typeof(ParsedException))]
        [ProducesResponseType(StatusCodes.Status422UnprocessableEntity, Type = typeof(ParsedException))]
        [HttpGet(template: "Document/{reportID}")]
        public async Task<IActionResult> GetReportDocument(Guid reportID)
        {
            AppFile file = await this.ReportSearchBusinessManager.GetReportBytes(reportID);

            HttpContext.Response.ContentType = file.ContentType;
            HttpContext.Response.Headers.Add("Access-Control-Expose-Headers", "Content-Disposition");

            return new FileContentResult(file.Data, file.ContentType)
            {
                FileDownloadName = file.FileName
            };
        }

        /// <summary>
        /// Returns contents of a report.
        /// Will return an Http 400 status code if given report id is not found in the db.
        /// </summary>
        /// <param name="reportID">Reports id.</param>
        /// <returns>Reports data.</returns>
        [ProducesResponseType(StatusCodes.Status200OK, Type = typeof(GetReportResponseModel))]
        [ProducesResponseType(StatusCodes.Status400BadRequest, Type = typeof(ParsedException))]
        [HttpGet(template: "Content/{reportID}")]
        public async Task<IActionResult> GetReportContents(Guid reportID)
        {
            return Ok(await this.ReportSearchBusinessManager.GetReport(reportID));
        }
    }
}
