using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Threading.Tasks;
using VDB.Architecture.AppException.Model;
using VDB.MicroServices.VulnerabilityDetector.DB.UnitOfWork;
using VDB.MicroServices.VulnerabilityDetector.Manager.Business.Interface;
using VDB.MicroServices.VulnerabilityDetector.Model.Exchange.ProductVersionCVE.AcknowledgeCVEForProductVersion;
using VDB.MicroServices.VulnerabilityDetector.Model.Exchange.ProductVersionCVE.GetIgnoredCVEsOfProductVersion;
using VDB.MicroServices.VulnerabilityDetector.Model.Exchange.ProductVersionCVE.GetProductVersionsWithIgnoredCVEs;
using VDB.MicroServices.VulnerabilityDetector.Model.Exchange.ProductVersionCVE.IgnoreCVEForProductVersion;

namespace VDB.MicroServices.VulnerabilityDetector.Web.API.Controllers
{
    [Route("[controller]")]
    [ApiController]
    public class ProductVersionCVEController : ControllerBase
    {
        private readonly IVulnerabilityDetectorUnitOfWork DB;
        private readonly IProductVersionBusinessManager ProductVersionBusinessManager;

        public ProductVersionCVEController(IVulnerabilityDetectorUnitOfWork db, IProductVersionBusinessManager productVersionBusinessManager)
        {
            this.DB = db;
            this.ProductVersionBusinessManager = productVersionBusinessManager;
        }

        /// <summary>
        /// Adds given cve to given producs ignored cves list so this duo won't appear in later scans until duo is acknowledged again. Useful for false positives, non-direct hit match types and vulnerabilities that won't be fixed.
        /// Will return an Http 400 status code if given cve id or product version id is not found in the db.
        /// This is an idempotent service. If given cve is already ignored for given product version service will return success without doing anything.
        /// </summary>
        /// <param name="request">Request body</param>
        /// <returns>Returns no data on success.</returns>
        [ProducesResponseType(StatusCodes.Status400BadRequest, Type = typeof(ParsedException))]
        [HttpPost]
        public async Task<IActionResult> IgnoreCVEForProductVersion(IgnoreCVEForProductVersionRequestModel request)
        {
            await this.ProductVersionBusinessManager.IgnoreCVEForProductVersion(request);

            await this.DB.SaveAsync();

            return Ok();
        }

        /// <summary>
        /// Removes given cve from given products ignored cves list.
        /// Will return an Http 400 status code if given cve id or product version id is not found in the db.
        /// This is an idempotent service. If given cve is already not in the ignored list of given product version service will return success without doing anything.
        /// </summary>
        /// <param name="request">Request body</param>
        /// <returns>Returns no data on success.</returns>
        [ProducesResponseType(StatusCodes.Status400BadRequest, Type = typeof(ParsedException))]
        [HttpDelete]
        public async Task<IActionResult> AcknowledgeCVEForProductVersion([FromQuery] AcknowledgeCVEForProductVersionRequestModel request)
        {
            await this.ProductVersionBusinessManager.AcknowledgeCVEForProductVersion(request);

            await this.DB.SaveAsync();

            return Ok();
        }

        /// <summary>
        /// Gets all product versions which has at least one item in its ignored cves list.
        /// </summary>
        /// <returns>An object containing list of product versions. If productVersions is null and http status code is 200 this means no product versions were found.</returns>
        [ProducesResponseType(StatusCodes.Status200OK, Type = typeof(GetProductVersionsWithIgnoredCVEsResponseModel))]
        [HttpGet]
        public async Task<IActionResult> GetProductVersionsWithIgnoredCVEs()
        {
            return Ok(await this.ProductVersionBusinessManager.GetProductVersionsWithIgnoredCVEs());
        }

        /// <summary>
        /// Gets ignored cves of given product version.
        /// Will return an Http 400 status code if given product version id is not found in the db.
        /// </summary>
        /// <param name="productVersionID">Product versions id.</param>
        /// <returns>An object containing list of cves.</returns>
        [ProducesResponseType(StatusCodes.Status200OK, Type = typeof(GetIgnoredCVEsOfProductVersionResponseModel))]
        [ProducesResponseType(StatusCodes.Status400BadRequest, Type = typeof(ParsedException))]
        [HttpGet("Ignored/{productVersionID}")]
        public async Task<IActionResult> GetIgnoredCVEsOfProductVersion(Guid productVersionID)
        {
            return Ok(await this.ProductVersionBusinessManager.GetIgnoredCVEsOfProductVersion(productVersionID));
        }
    }
}
