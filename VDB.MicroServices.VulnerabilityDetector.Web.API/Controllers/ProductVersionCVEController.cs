using Microsoft.AspNetCore.Mvc;
using System;
using System.Threading.Tasks;
using VDB.MicroServices.VulnerabilityDetector.DB.UnitOfWork;
using VDB.MicroServices.VulnerabilityDetector.Manager.Business.Interface;
using VDB.MicroServices.VulnerabilityDetector.Model.Exchange.ProductVersionCVE.AcknowledgeCVEForProductVersion;
using VDB.MicroServices.VulnerabilityDetector.Model.Exchange.ProductVersionCVE.IgnoreCVEForProductVersion;

namespace VDB.MicroServices.VulnerabilityDetector.Web.API.Controllers
{
    [Route("[controller]")]
    [ApiController]
    public class ProductVersionCVEController : ControllerBase
    {
        private readonly IVulnerabilityDetectorUnitOfWork DB;
        private readonly IProductVersionBusinessManager ProductVersionBusinessManager;

        public ProductVersionCVEController(IVulnerabilityDetectorUnitOfWork db, IProductVersionBusinessManager productVersionBusinessManager)
        {
            this.DB = db;
            this.ProductVersionBusinessManager = productVersionBusinessManager;
        }

        [HttpPost]
        public async Task<IActionResult> IgnoreCVEForProductVersion(IgnoreCVEForProductVersionRequestModel request)
        {
            await this.ProductVersionBusinessManager.IgnoreCVEForProductVersion(request);

            await this.DB.SaveAsync();

            return Ok();
        }

        [HttpDelete]
        public async Task<IActionResult> AcknowledgeCVEForProductVersion([FromQuery] AcknowledgeCVEForProductVersionRequestModel request)
        {
            await this.ProductVersionBusinessManager.AcknowledgeCVEForProductVersion(request);

            await this.DB.SaveAsync();

            return Ok();
        }

        [HttpGet]
        public async Task<IActionResult> GetProductVersionsWithIgnoredCVEs()
        {
            return Ok(await this.ProductVersionBusinessManager.GetProductVersionsWithIgnoredCVEs());
        }

        [HttpGet("Ignored/{productVersionID}")]
        public async Task<IActionResult> GetIgnoredCVEsOfProductVersion(Guid productVersionID)
        {
            return Ok(await this.ProductVersionBusinessManager.GetIgnoredCVEsOfProductVersion(productVersionID));
        }
    }
}
