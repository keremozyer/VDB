using AutoMapper;
using Microsoft.Extensions.Options;
using System;
using System.Net.Http;
using System.Threading.Tasks;
using VDB.Architecture.Concern.ExtensionMethods;
using VDB.MicroServices.VulnerabilityDetector.Concern.Options;
using VDB.MicroServices.VulnerabilityDetector.ExternalData.Manager.Contract;
using VDB.MicroServices.VulnerabilityDetector.ExternalData.Model.CVEData.SearchByProductVersion;
using VDB.MicroServices.VulnerabilityDetector.Model.DTO._CVEData;

namespace VDB.MicroServices.VulnerabilityDetector.ExternalData.Manager.Service.CVEData.CVEData
{
    public class CVEDataServiceManager : ICVEDataServiceManager
    {
        private readonly CVEDataSettings CVEDataSettings;
        private readonly HttpClient HttpClient;
        private readonly IMapper Mapper;

        public CVEDataServiceManager(IOptions<EndpointSettings> endpointSettings, HttpClient httpClient, IMapper mapper)
        {
            this.CVEDataSettings = endpointSettings.Value.CVEData;
            this.HttpClient = httpClient;
            this.Mapper = mapper;
        }

        public async Task<ProductCVEData> SearchByProductVersion(string vendorName, string productName, string version)
        {
            HttpResponseMessage httpResponse = await this.HttpClient.GetAsync(String.Format(this.CVEDataSettings.SearchByProductVersionEndpoint, vendorName, productName, version));

            SearchByProductVersionResponseModel response = (await httpResponse.Content.ReadAsStringAsync()).DeserializeJSON<SearchByProductVersionResponseModel>();

            return this.Mapper.Map<ProductCVEData>(response);
        }
    }
}
