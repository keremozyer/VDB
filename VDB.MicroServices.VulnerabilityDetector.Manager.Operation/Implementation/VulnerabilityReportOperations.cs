using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;
using VDB.MicroServices.VulnerabilityDetector.DB.UnitOfWork;
using VDB.MicroServices.VulnerabilityDetector.Manager.Operation.Interface;
using VDB.MicroServices.VulnerabilityDetector.Model.Entity;

namespace VDB.MicroServices.VulnerabilityDetector.Manager.Operation.Implementation
{
    public class VulnerabilityReportOperations : IVulnerabilityReportOperations
    {
        private readonly IVulnerabilityDetectorUnitOfWork DB;

        public VulnerabilityReportOperations(IVulnerabilityDetectorUnitOfWork db)
        {
            this.DB = db;
        }

        public void Create(VulnerabilityReport vulnerabilityReport)
        {
            this.DB.VulnerabilityReportRepository.Create(vulnerabilityReport);
        }

        public void Update(VulnerabilityReport vulnerabilityReport)
        {
            this.DB.VulnerabilityReportRepository.Update(vulnerabilityReport);
        }

        public async Task<VulnerabilityReport> GetAsync(Guid id)
        {
            return await this.DB.VulnerabilityReportRepository.GetFirstAsync(r => r.Id == id);
        }

        public async Task<List<VulnerabilityReport>> Search(Expression<Func<VulnerabilityReport, bool>> searchExpression, int pageCount, int pageSize)
        {
            return await this.DB.VulnerabilityReportRepository.GetAsync(searchExpression, orderBy: o => o.OrderByDescending(vr => vr.ReportCreationDate), pageCount: pageCount, pageSize: pageSize);
        }

        public async Task<int> GetCount(Expression<Func<VulnerabilityReport, bool>> searchExpression)
        {
            return await this.DB.VulnerabilityReportRepository.GetCount(searchExpression);
        }
    }
}
