using AutoMapper;
using System;

namespace VDB.MicroServices.VulnerabilityDetector.Manager.Mapper._AutoMapperProfiles
{
    public class VulnerabilityDetectorMappingProfile : Profile
    {
        public VulnerabilityDetectorMappingProfile()
        {
            CreateMap<ExternalData.Model.ProductCatalog.GetCatalog.GetCatalogResponseModel, Model.DTO.ProductCatalog.Catalog>();
            CreateMap<ExternalData.Model.ProductCatalog.GetCatalog.ProductData, Model.DTO.ProductCatalog.ProductData>();
            CreateMap<ExternalData.Model.ProductCatalog.GetCatalog.ProductVersionData, Model.DTO.ProductCatalog.ProductVersionData>();
            CreateMap<ExternalData.Model.ProductCatalog.GetCatalog.ServerData, Model.DTO.ProductCatalog.ServerData>();
            CreateMap<ExternalData.Model.ProductCatalog.GetCatalog.VendorData, Model.DTO.ProductCatalog.VendorData>();

            CreateMap<ExternalData.Model.CVEData.SearchByProductVersion.SearchByProductVersionResponseModel, Model.DTO._CVEData.ProductCVEData>();
            CreateMap<ExternalData.Model.CVEData.SearchByProductVersion.CVEData, Model.DTO._CVEData.CVEData>();
            CreateMap<ExternalData.Model.CVEData.SearchByProductVersion.CVEMatchType, Model.DTO._CVEData.CVEMatchType>();
            CreateMap<ExternalData.Model.CVEData.SearchByProductVersion.ProductData, Model.DTO._CVEData.CVEProductData>();

            CreateMap<Model.Entity.VulnerabilityReport, Model.Exchange.Report.SearchReports.VulnerabilityReportData>().ForMember(d => d.HasDocument, o => o.MapFrom(s => !String.IsNullOrWhiteSpace(s.Base64ReportData)));
        }
    }
}
